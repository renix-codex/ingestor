name: cd
on:
  push:
    branches: ["main"]
    tags: ["v*.*.*"]

permissions:
  contents: read
  packages: write   # needed to push to GHCR

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}/ingestor
  # Default build target; change to ./cmd/ingestor if your main isn't at repo root
  BUILD_TARGET: ./main.go

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Derive image tags
        id: meta
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            TAG="${GITHUB_REF_NAME}"
            echo "tags=${TAG}" >> $GITHUB_OUTPUT
          else
            echo "tags=sha-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile
          build-args: |
            TARGET=${{ env.BUILD_TARGET }}
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.tags }}
            ${{ env.IMAGE_NAME }}:latest

  # OPTIONAL: Azure Container Apps deploy (runs only if secrets are present)
  deploy-azure:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: ${{ secrets.AZURE_CLIENT_ID && secrets.AZURE_TENANT_ID && secrets.AZURE_SUBSCRIPTION_ID && vars.AZ_RESOURCE_GROUP && vars.AZ_CONTAINERAPPS_ENV && vars.AZ_APP_NAME && vars.PG_HOST && secrets.PG_PASSWORD }}
    steps:
      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure Container Apps
        run: |
          az containerapp update \
            --name "${{ vars.AZ_APP_NAME }}" \
            --resource-group "${{ vars.AZ_RESOURCE_GROUP }}" \
            --image "${{ env.IMAGE_NAME }}:latest" \
            --set-env-vars \
              HTTP_LISTEN_ADDR=":8080" \
              HTTP_TIMEOUT="8s" \
              SOURCE_URL="https://jsonplaceholder.typicode.com/posts" \
              SOURCE_NAME="placeholder_api" \
              PG_HOST="${{ vars.PG_HOST }}" \
              PG_PORT="5432" \
              PG_USER="app" \
              PG_PASSWORD="${{ secrets.PG_PASSWORD }}" \
              PG_DATABASE="ingestor" \
              PG_SSLMODE="require" \
            --only-show-errors || \
          az containerapp create \
            --name "${{ vars.AZ_APP_NAME }}" \
            --resource-group "${{ vars.AZ_RESOURCE_GROUP }}" \
            --environment "${{ vars.AZ_CONTAINERAPPS_ENV }}" \
            --image "${{ env.IMAGE_NAME }}:latest" \
            --ingress external --target-port 8080 \
            --env-vars \
              HTTP_LISTEN_ADDR=":8080" \
              HTTP_TIMEOUT="8s" \
              SOURCE_URL="https://jsonplaceholder.typicode.com/posts" \
              SOURCE_NAME="placeholder_api" \
              PG_HOST="${{ vars.PG_HOST }}" \
              PG_PORT="5432" \
              PG_USER="app" \
              PG_PASSWORD="${{ secrets.PG_PASSWORD }}" \
              PG_DATABASE="ingestor" \
              PG_SSLMODE="require"
